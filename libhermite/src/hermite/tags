!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_PYTHON_MODULE	python.cpp	/^BOOST_PYTHON_MODULE(hermite)$/;"	f	namespace:hermite
HERMITE_DISCRETIZE_H	discretize.hpp	2;"	d
HERMITE_HERMITE_H	hermite.hpp	2;"	d
HERMITE_ITERATORS_H	iterators.hpp	2;"	d
HERMITE_TRANSFORM_H	transform.hpp	2;"	d
HERMITE_TYPES_H	types.hpp	2;"	d
HERMITE_VARF_H	varf.hpp	2;"	d
Hyper_cube_iterator	iterators.hpp	/^    Hyper_cube_iterator(const std::ivec & upper_bounds):$/;"	f	class:hermite::Hyper_cube_iterator
Hyper_cube_iterator	iterators.hpp	/^class Hyper_cube_iterator : public Vector_iterator {$/;"	c	namespace:hermite
IO_H	io.hpp	2;"	d
Multi_index_iterator	iterators.hpp	/^    Multi_index_iterator(unsigned int dim, unsigned int upper_bound):$/;"	f	class:hermite::Multi_index_iterator
Multi_index_iterator	iterators.hpp	/^class Multi_index_iterator : public Vector_iterator {$/;"	c	namespace:hermite
REC_A	hermite.hpp	7;"	d
REC_B	hermite.hpp	8;"	d
TEMPLATES_H	templates.hpp	2;"	d
Vector_iterator	iterators.hpp	/^    Vector_iterator(int dim): dim(dim), multi_index(std::ivec(dim, 0)), full(false) {}$/;"	f	class:hermite::Vector_iterator
Vector_iterator	iterators.hpp	/^class Vector_iterator {$/;"	c	namespace:hermite
cube	types.hpp	/^    typedef vector<mat> cube;$/;"	t	namespace:std
dim	iterators.hpp	/^    unsigned int dim;$/;"	m	class:hermite::Vector_iterator
discretize	discretize.cpp	/^vec discretize($/;"	f	namespace:hermite
discretize_from_string	python.cpp	/^vec discretize_from_string($/;"	f	namespace:hermite
fabs	templates.hpp	/^template<class type> double fabs(std::vector<type> vec) {$/;"	f
full	iterators.hpp	/^    bool full;$/;"	m	class:hermite::Vector_iterator
get	iterators.hpp	/^    const std::ivec& get() const {$/;"	f	class:hermite::Vector_iterator
hermite	discretize.cpp	/^namespace hermite {$/;"	n	file:
hermite	discretize.hpp	/^namespace hermite {$/;"	n
hermite	hermite.cpp	/^namespace hermite {$/;"	n	file:
hermite	hermite.hpp	/^namespace hermite {$/;"	n
hermite	io.cpp	/^namespace hermite {$/;"	n	file:
hermite	iterators.hpp	/^namespace hermite {$/;"	n
hermite	python.cpp	/^namespace hermite {$/;"	n	file:
hermite	transform.cpp	/^namespace hermite {$/;"	n	file:
hermite	transform.hpp	/^namespace hermite {$/;"	n
hermite	varf.cpp	/^namespace hermite {$/;"	n	file:
hermite	varf.hpp	/^namespace hermite {$/;"	n
hermite_eval	hermite.cpp	/^void hermite_eval(double x,$/;"	f	namespace:hermite
increment	iterators.cpp	/^void Hyper_cube_iterator::increment()$/;"	f	class:Hyper_cube_iterator
increment	iterators.cpp	/^void Multi_index_iterator::increment()$/;"	f	class:Multi_index_iterator
integrate	transform.cpp	/^double integrate($/;"	f	namespace:hermite
intern_function	python.cpp	/^void intern_function(string const & function_body)$/;"	f	namespace:hermite
isFull	iterators.hpp	/^    bool isFull() const {$/;"	f	class:hermite::Vector_iterator
ivec	types.hpp	/^    typedef vector<unsigned int> ivec;$/;"	t	namespace:std
map_point	discretize.cpp	/^void map_point(vec const & translation,$/;"	f	namespace:hermite
mat	types.hpp	/^    typedef vector<vec> mat;$/;"	t	namespace:std
multi_index	iterators.hpp	/^    std::ivec multi_index;$/;"	m	class:hermite::Vector_iterator
operator *	templates.cpp	/^double operator*(const vec& vec1, const vec& vec2) {$/;"	f
operator *	templates.cpp	/^mat operator*(const mat& mat1, const mat& mat2) {$/;"	f
operator *	templates.cpp	/^vec operator*(const mat& matrix, const vec& vector) {$/;"	f
operator *	templates.hpp	/^template<class type> std::vector<type> operator*(const std::vector<type>& vec, const double& x) {$/;"	f
operator +	templates.hpp	/^template<class type> std::vector<type> operator+(const std::vector<type>& v1, const std::vector<type>& v2) {$/;"	f
operator -	templates.hpp	/^template<class type> std::vector<type> operator-(const std::vector<type>& v1, const std::vector<type>& v2) {$/;"	f
operator []	iterators.hpp	/^    int operator[](int i) {$/;"	f	class:hermite::Vector_iterator
printCube	io.cpp	/^void printCube(cube a)$/;"	f	namespace:hermite
printMat	io.cpp	/^void printMat(mat a)$/;"	f	namespace:hermite
printVec	io.cpp	/^void printVec(vec a)$/;"	f	namespace:hermite
s_func	types.hpp	/^    typedef double (*s_func)(double*);$/;"	t	namespace:std
std	types.hpp	/^namespace std {$/;"	n
sum	iterators.hpp	/^    unsigned int sum;$/;"	m	class:hermite::Multi_index_iterator
transform	transform.cpp	/^vec transform($/;"	f	namespace:hermite
triple_products	varf.cpp	/^cube triple_products(u_int degree)$/;"	f	namespace:hermite
u_int	types.hpp	/^    typedef unsigned int u_int;$/;"	t	namespace:std
upper_bound	iterators.hpp	/^    const unsigned int upper_bound;$/;"	m	class:hermite::Multi_index_iterator
upper_bounds	iterators.hpp	/^    const std::ivec upper_bounds;$/;"	m	class:hermite::Hyper_cube_iterator
varf	varf.cpp	/^mat varf($/;"	f	namespace:hermite
vec	types.hpp	/^    typedef vector<double> vec;$/;"	t	namespace:std
